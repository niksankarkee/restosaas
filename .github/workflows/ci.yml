name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Backend API Tests
  test-api:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: restosaas_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24.0'
        cache: true
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      working-directory: ./apps/api
      run: go mod download
    
    - name: Run tests
      working-directory: ./apps/api
      env:
        JWT_SECRET: test-secret-key
        APP_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_NAME: restosaas_test
      run: go test -v ./...
    
    - name: Build API
      working-directory: ./apps/api
      env:
        JWT_SECRET: test-secret-key
        APP_ENV: production
      run: go build -o api ./cmd/api

  # Frontend Web Tests
  test-web:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: apps/web/package-lock.json
    
    - name: Install dependencies
      working-directory: ./apps/web
      run: npm ci
    
    - name: Run linting
      working-directory: ./apps/web
      run: npm run lint || true
    
    - name: Run type checking
      working-directory: ./apps/web
      run: npx tsc --noEmit
    
    - name: Build application
      working-directory: ./apps/web
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: web-build
        path: apps/web/.next/
        retention-days: 1

  # Docker Build and Test
  test-docker:
    runs-on: ubuntu-latest
    needs: [test-api, test-web]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build API Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./apps/api
        file: ./apps/api/Dockerfile
        push: false
        tags: restosaas-api:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build Web Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./apps/web
        file: ./apps/web/Dockerfile
        push: false
        tags: restosaas-web:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Database Migration Test
  test-migrations:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: restosaas_migration_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24.0'
        cache: true
    
    - name: Install dependencies
      working-directory: ./apps/api
      run: go mod download
    
    - name: Test database migrations
      working-directory: ./apps/api
      env:
        JWT_SECRET: test-secret-key
        APP_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_NAME: restosaas_migration_test
      run: |
        # This would run your migration tests
        # For now, we'll just verify the app can connect to the database
        go run ./cmd/api &
        sleep 5
        curl -f http://localhost:8080/health || exit 1
        pkill -f "./api"

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: [test-api, test-web]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: restosaas_integration
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24.0'
        cache: true
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: apps/web/package-lock.json
    
    - name: Install API dependencies
      working-directory: ./apps/api
      run: go mod download
    
    - name: Install Web dependencies
      working-directory: ./apps/web
      run: npm ci
    
    - name: Start API server
      working-directory: ./apps/api
      env:
        JWT_SECRET: test-secret-key
        APP_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_NAME: restosaas_integration
      run: |
        go run ./cmd/api &
        echo $! > api.pid
        sleep 10
    
    - name: Start Web server
      working-directory: ./apps/web
      run: |
        npm run build
        npm start &
        echo $! > web.pid
        sleep 10
    
    - name: Run integration tests
      run: |
        # Test API endpoints
        curl -f http://localhost:8080/api/restaurants || exit 1
        
        # Test Web application
        curl -f http://localhost:3000 || exit 1
        
        # Test API authentication
        curl -X POST http://localhost:8080/api/auth/register \
          -H "Content-Type: application/json" \
          -d '{"email":"test@example.com","password":"password123","displayName":"Test User","role":"CUSTOMER"}' || exit 1
    
    - name: Cleanup
      if: always()
      run: |
        if [ -f api.pid ]; then
          kill $(cat api.pid) || true
        fi
        if [ -f web.pid ]; then
          kill $(cat web.pid) || true
        fi

  # Deploy to staging (only on develop branch)
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test-api, test-web, test-docker, integration-tests]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # This could include:
        # - Building Docker images
        # - Pushing to container registry
        # - Deploying to staging environment
        # - Running smoke tests

  # Deploy to production (only on main branch)
  deploy-production:
    runs-on: ubuntu-latest
    needs: [test-api, test-web, test-docker, integration-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # This could include:
        # - Building and pushing Docker images
        # - Deploying to production environment
        # - Running health checks
        # - Sending notifications
