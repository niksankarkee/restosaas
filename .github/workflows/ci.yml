name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_restosaas
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.0'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: |
          cd apps/api
          go mod download
          go mod tidy

      - name: Run tests
        run: |
          cd apps/api
          make test-coverage
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: test_restosaas
          JWT_SECRET: test-secret-key

      - name: Run linter
        run: |
          cd apps/api
          make lint

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: apps/api/coverage.html
          flags: backend
          name: backend-coverage

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/web/package-lock.json

      - name: Install dependencies
        run: |
          cd apps/web
          npm ci

      - name: Run tests
        run: |
          cd apps/web
          npm run test:ci

      - name: Run linter
        run: |
          cd apps/web
          npx eslint . --ext .ts,.tsx --max-warnings 0

      - name: Build application
        run: |
          cd apps/web
          npm run build

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: apps/web/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_restosaas
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.0'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/web/package-lock.json

      - name: Install backend dependencies
        run: |
          cd apps/api
          go mod download

      - name: Install frontend dependencies
        run: |
          cd apps/web
          npm ci

      - name: Build backend
        run: |
          cd apps/api
          go build -o bin/api cmd/api/main.go

      - name: Build frontend
        run: |
          cd apps/web
          npm run build

      - name: Start backend
        run: |
          cd apps/api
          ./bin/api &
          sleep 5
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: test_restosaas
          JWT_SECRET: test-secret-key
          PORT: 8080

      - name: Start frontend
        run: |
          cd apps/web
          npm start &
          sleep 10
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8080/api

      - name: Run integration tests
        run: |
          # Test API health endpoint
          curl -f http://localhost:8080/health || exit 1

          # Test API endpoints
          curl -f http://localhost:8080/api/restaurants || exit 1

          # Test frontend
          curl -f http://localhost:3000 || exit 1

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, integration-tests]
    if: github.ref == 'refs/heads/develop'

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, integration-tests, security-scan]
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
